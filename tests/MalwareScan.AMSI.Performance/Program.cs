// See https://aka.ms/new-console-template for more information
using System;
using BenchmarkDotNet;
using System.IO;
using BenchmarkDotNet.Attributes;
using MalwareScan.AMSI;
using BenchmarkDotNet.Running;
using System.Collections.Generic;

public static class Program
{
    public static void Main()
    {
        BenchmarkRunner.Run<MalwareScanBenchmark>();
    }
}

[MemoryDiagnoser]
public class MalwareScanBenchmark
{
    private const string SmallFileName = "small.txt";
    private const int DummyFileSize = 10 * 1024; // 10KB

    public static IEnumerable<TestData> Data { get; set; } = CreateTestData();

    [ParamsSource(nameof(Data))]
    public TestData CurrentData { get; set; }

    private MalwareScanner scanner = new MalwareScanner("Performance test");

    public static IEnumerable<TestData> CreateTestData()
    {
        var temp = new List<TestData>();
        const string directoryName = "testdata";

        if (!Directory.Exists(directoryName))
        {
            Directory.CreateDirectory(directoryName);
        }

        foreach (int size in new[] { 
            50 * 1024, // 50 kb
            10 * 1024 * 1024, // 10 MB
            500 * 1024 * 1024 // 500 mb 
            })
        {
            string fileName = $"{directoryName}/{size}.txt";
            if (!File.Exists(fileName))
            {
                using (var fs = File.Create(fileName))
                {
                    byte[] data = new byte[size];
                    fs.Write(data, 0, data.Length);
                    fs.Close();
                }
            }

            var memoryStream = new MemoryStream();
            var fileStream = File.Open(fileName, FileMode.Open, FileAccess.Read, FileShare.Read); // https://stackoverflow.com/a/77626357/11534
            fileStream.CopyTo(memoryStream);
            fileStream.Position = 0;
            {
                temp.Add(new TestData(size, fileName, memoryStream, memoryStream));
            }
        }
        return temp;
    }

    [GlobalCleanup]
    public void GlobalCleanup()
    {
        // File locking issues prevents this from working reliably
        foreach (var item in Data)
        {
            // item.FileStream.Close();
            // item.FileStream.Dispose();
            // item.MemoryStream.Dispose();
            // File.Delete(item.FileName);
        }
    }

    [Benchmark]
    public void ScanFile()
    {
        scanner.HasVirus(CurrentData.FileStream, CurrentData.FileName);
    }

    [Benchmark]
    public void ScanMemory()
    {
        scanner.HasVirus(CurrentData.MemoryStream, CurrentData.FileName);
    }
    

    public class TestData
    {
        public TestData(int size, string fileName, Stream fileStream, Stream memoryStream)
        {
            Size = size;
            FileName = fileName;
            FileStream = fileStream;
            MemoryStream = memoryStream;
        }
        public int Size { get; set; }
        public string FileName { get; set; }
    
        public Stream FileStream { get; set; }
        public Stream MemoryStream { get; set; }
        
        public override string ToString() => Size.ToString("N0");
    }
}

