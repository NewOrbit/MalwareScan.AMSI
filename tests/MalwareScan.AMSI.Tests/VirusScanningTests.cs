namespace MalwareScan.AMSI.Tests
{
    using System;
    using System.IO;
    using System.Text;

    using MalwareScan.AMSI;

    using Xunit;

    public class VirusScanningTests
    {
        private const string AppName = "VirusScan.AMSI TEST library";

        [Fact]
        public void CanDetectEICARInStream()
        {
            var stream = this.CreateStream(@"X5O!P%@AP[4\PZX54(P^)7CC)7}" + @"$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*");
            var subject = new MalwareScanner(AppName);
            var result = subject.HasVirus(stream, "eicar.com");
            Assert.True(result);
        }

        [Fact]
        public void CanDetectEICARInByteArray()
        {
            var arr = Encoding.UTF8.GetBytes(@"X5O!P%@AP[4\PZX54(P^)7CC)7}" + @"$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*");
            var subject = new MalwareScanner(AppName);
            var result = subject.HasVirus(arr, "eicar.com");
            Assert.True(result);
        }

        [Fact]
        public void DoesNotDetectInnocousStream()
        {
            var stream = this.CreateStream(@"bob");
            var subject = new MalwareScanner(AppName);
            var result = subject.HasVirus(stream, "bob.com");
            Assert.False(result);
        }

        [Fact]
        public void DoesNotDetectInnocuousByteArray()
        {
            var arr = Encoding.UTF8.GetBytes(@"bob");
            var subject = new MalwareScanner(AppName);
            var result = subject.HasVirus(arr, "bob.com");
            Assert.False(result);
        }

        [Fact]
        public void HandlesStreamPositionInSeekableStream()
        {
            var stream = this.CreateStream(@"X5O!P%@AP[4\PZX54(P^)7CC)7}" + @"$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*");
            stream.Position = 10;
            var subject = new MalwareScanner(AppName);
            var result = subject.HasVirus(stream, "eicar.com");
            Assert.True(result);
            Assert.Equal(10, stream.Position);
        }

        [Fact]
        public void TestMethodShouldReturnTrue()
        {
            // If this test fails, it's because virus scanning on the machine is not working.
            var subject = new MalwareScanner(AppName);
            var result = subject.TestIfItIsWorking();
            Assert.True(result.IsItWorking);
        }

        [Fact]
        public void NullArrayThrowsError()
        {
            var subject = new MalwareScanner();
            Assert.Throws<ArgumentException>(() => subject.HasVirus((byte[])null, "bob"));
        }

        [Fact]
        public void EmptyFileNameThrows()
        {
            var subject = new MalwareScanner();
            Assert.Throws<ArgumentException>(() => subject.HasVirus(new byte[1] { new byte() }, String.Empty));
        }

        private Stream CreateStream(string value)
        {
            var stream = new MemoryStream();
            using (var writer = new StreamWriter(stream, Encoding.UTF8, 1024, true))
            {
                writer.Write(value);
                writer.Flush();
            }

            stream.Position = 0;
            return stream;
        }
    }
}
